mean(subset(data, sex == 1 & treatment == 1)$response1)
library(plyr)
melted <- melt(data, id.vars=c("sex", "treatment"))
head(melte)
head(melted)
ddply(melted, c("sex", "treatment", "variable"), summarise,
mean = mean(value), sd = sd(value),
sem = sd(value)/sqrt(length(value)))
data = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter = as.factor(data$parameter)
str(data)
ddply(data,c('parameter'),summarize,mean(Mean_MAPQ))
ddply(data,c('parameter'),summarize,mean)
ddply(data,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ))
str(data)
ddply(data,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(time))
str(data)
ddply(data,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
ddply(data,c('parameter'),summarize,MAPQ=min(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
ddply(data,c('parameter'),summarize,MAPQ=max(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
ddply(data,c('parameter'),summarize,MAPQ=max(Mean_MAPQ),Fraction_aligned=min(fraction),Avg_time=mean(Time))
ddply(data,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
head(mtcars)
carmelt = melt(mtcars,id=c('carname','gear','cyl'),measure.vars = c('mpg','hp'))
head(carmelt)
head(mtcars)
View(carmelt)
str(carmelt)
dcast(carmelt,cyl~variable)
?dcast
?group_by
library(dplyr)
install.packages('dplyr')
library(dplyr)
group_by(data,parameter)
View(group_by(data,parameter))
str(data)
interesting = data[,c('parameter','value','Mean_MAPQ','fraction','Time')]
str(interesting)
ddply(interesting,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
View(group_by(interesting,parameter))
?arrange
arrange(interesting,parameter)
arrange(interesting,value)
new = arrange(interesting,value)
group_by(new, parameter)
View(group_by(new, parameter))
View(new)
View(group_by(new, parameter))
?group_by
View(group_by(new, parameter,add=T))
group_by(new, parameter,add=T)==new
all(group_by(new, parameter,add=T)==new)
str(new)
data = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter = as.factor(data$parameter)
data = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
interesting = data[,c('parameter','value','Mean_MAPQ','fraction','Time')]
str(interesting)
ddply(interesting,c('parameter'),summarize,MAPQ=mean(Mean_MAPQ),Fraction_aligned=mean(fraction),Avg_time=mean(Time))
group_by(interesting,parameter)
View(group_by(interesting,parameter))
str(interesting,parameter)
str(interesting)
new = arrange(interesting,value)
(group_by(new, parameter,add=T)==new)
all(group_by(new, parameter,add=T)==new)
View(arrange(group_by(interesting,parameter)))
?cut
data = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
rawdata = data
rm(list=ls())
rawdata = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter = as.factor(data$parameter)
data[,c('parameter','value','Mean_MAPQ','fraction','Time')]
data = data[,c('parameter','value','Mean_MAPQ','fraction','Time')]
str(data)
order(data,parameter)
with(data,data[order(parameter,value)])
with(data,data[order(parameter,value),])
View(with(data,data[order(parameter,value),]))
View(data[order(parameter,value),])
View(with(data,data[order(parameter,value),])))
View(with(data,data[order(parameter,value),]))
ordered = with(data,data[order(parameter,value),])
str(ordered)
with(ordered,ordered[parameter='default'])
with(ordered,ordered[parameter=='default',])
data[-default]
data[-default,]
ordered[parameter=='default',]
?find
default = ordered[ordered$parameter=='default',]
default
attempts = ordered[-ordered$parameter=='default',]
attempts = ordered[-(ordered$parameter=='default'),]
rm(default)
?split
data = with(data,data[order(parameter,value),])
attempts = ordered[-(data$parameter=='default'),]
rm(ordered)
?split
arrange(rawdata,parameter,value)
View(arrange(rawdata,parameter,value))
ddply(attempts)
View(ddply(attempts,c('parameter','value')))
split(attempts,parameter)
split(attempts,attempts$parameter)
attempts = split(attempts,attempts$parameter)
library(ggplot2)
ggplot(attempts, aes(Mean_MAPQ,fraction))
ggplot(data, aes(Mean_MAPQ,fraction))
ggplot(data, aes(Mean_MAPQ,fraction)) + geom_point()
qplot(Mean_MAPQ,fraction, data=data, facets = parameter)
qplot(Mean_MAPQ,fraction, data=data, facets = parameter~.)
qplot(Mean_MAPQ,fraction, data=data, facets = .~parameter)
summary(ggplot(data, aes(Mean_MAPQ,fraction)) )
plot = ggplot(data, aes(Mean_MAPQ,fraction))
summary(plot)
plot+ geom_line()
plot+ geom_line() + facet_grid(.~parameter)
plot+ geom_line() + facet_grid(parameter)
plot+ geom_line() + facet_grid(parameter~.)
str(attempts)
length(attempts)
?for
dev.off()
for (i in seq(1:length(attempts))) {
ggplot(attempts[[1]], aes(Mean_MAPQ,fraction))  + geom_line()
}
dev.off()
ggplot(attempts[[1]], aes(Mean_MAPQ,fraction))  + geom_line()
for (i in seq(1:length(attempts))) {
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
seq(1:length(attempts))
for (i in seq(1:length(attempts))) {
print(i)
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
i
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
ggplot(attempts[[2]], aes(Mean_MAPQ,fraction))  + geom_line()
pdf('myplots.pdf')
for (i in seq(1:length(attempts))) {
print(i)
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
dev.off()
getwd()
pdf('myplots.pdf')
for (i in seq(1:length(attempts))) {
print(i)
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
dev.off()
for (i in seq(1:length(attempts))) {
print(i)
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
dev.off()
for (i in seq(1:length(attempts))) {
ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
}
attempts[[i]]
for (i in seq(1:length(attempts))) {
#  ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
plot(attempts[[i]][,1],attempts[[i]][,2])
}
str(attempts)
for (i in seq(1:length(attempts))) {
#  ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
plot(attempts[[i]][,3],attempts[[i]][,4])
}
dev.off()
pdf('myplots.pdf')
for (i in seq(1:length(attempts))) {
#  ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
plot(attempts[[i]][,3],attempts[[i]][,4])
}
dev.off()
str(attempts[[1]])
plot(attempts[[i]][,3],attempts[[i]][,4], main=attempts[[i]][1,1], xlab='Mean MAPQ',
ylab='Fraction mapped')
for (i in seq(1:length(attempts))) {
#  ggplot(attempts[[i]], aes(Mean_MAPQ,fraction))  + geom_line()
plot(attempts[[i]][,3],attempts[[i]][,4], main=attempts[[i]][1,1], xlab='Mean MAPQ',
ylab='Fraction mapped')
}
names(attempts)
symbol=c('A','B','c','d','D','E','k','L','m','O','r','T','U','w','W')
symbol %in% names(attempts)
names(attempts) %in% symbol
parameters = data.frame(
symbol=c('A','B','c','d','D','E','k','L','m','O','r','T','U','w','W'),
meaning=c('Matching score','Mismatch penalty','Max Occurance','zDropoff','Chain fraction',
'Gap Extention penalty', 'Minimum seed length', 'Clipping penalty','Mate SW rounds',
'Gap Open penalty', 'Seed split ratio', 'Min alignment quality', 'Unpair penalty',
'Bandwidth','Seed bases count')
)
attempts = split(attempts,attempts$parameter)
str(attempts)
length(attempts)
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter = as.factor(data$parameter)
str(parameters)
parameters[data$parameter==parameters$symbol,meaning]
parameters[data$parameter==parameters$symbol,parameters$meaning]
parameters$meaning
parameters$symbol
data$parameter
str(data)
data$parameter
rawdata = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter
parameters = data.frame(
symbol=c('A','B','c','d','D','E','k','L','m','O','r','T','U','w','W'),
meaning=c('Matching score','Mismatch penalty','Max Occurance','zDropoff','Chain fraction',
'Gap Extention penalty', 'Minimum seed length', 'Clipping penalty','Mate SW rounds',
'Gap Open penalty', 'Seed split ratio', 'Min alignment quality', 'Unpair penalty',
'Bandwidth','Seed bases count'),
stringsAsFactors = F)
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
data$parameter
parameters$symbol
data$parameter %in% parameters$symbol
parameters[data$parameter %in% parameters$symbol,parameters$meaning]
parameters$meaning
parameters$symbol
data$parameter
data$par = data$parameter
data$par %in% parameters$symbol
which(data$par %in% parameters$symbol)
which(parameters$symbol %in% data$par )
data$p=as.factor(data$par)
symbols=as.factor(parameters$symbol)
symbols
levels(data$p)
levels(symbols)==levels(data$p)
symbol=c('A','B','c','d','D','E','k','L','m','O','r','T','U','w','W')
meaning=c('Matching score','Mismatch penalty','Max Occurance','zDropoff','Chain fraction',
'Gap Extention penalty', 'Minimum seed length', 'Clipping penalty','Mate SW rounds',
'Gap Open penalty', 'Seed split ratio', 'Min alignment quality', 'Unpair penalty',
'Bandwidth','Seed bases count')
data$par==symbols
which(data$par==symbols)
which(data$par%in%symbols)
par = data$parameter
rm(symbols)
par==symbol
which(par==symbol)
which(symbol%in%par)
?find
find(symbol,par%in%symbol)
find(symbol,symbol%in%par)
match(symbol,par)
match(par,symbol)
match(par,symbol)
meaning
meaning[m]
m=match(par,symbol)
meaning[m]
data$par=meaning[m]
View(data)
View(parameters)
?match
par%in%symbol
rm(list=ls())
parameters = data.frame(
symbol=c('A','B','c','d','D','E','k','L','m','O','r','T','U','w','W'),
meaning=c('Matching score','Mismatch penalty','Max Occurance','zDropoff','Chain fraction',
'Gap Extention penalty', 'Minimum seed length', 'Clipping penalty','Mate SW rounds',
'Gap Open penalty', 'Seed split ratio', 'Min alignment quality', 'Unpair penalty',
'Bandwidth','Seed bases count'),
stringsAsFactors = F)
rawdata = read.table( pipe('ssh -l hpcbiointern01 biocluster.igb.illinois.edu "cat /home/groups/hpcbio_shared/azza/H3A_NextGen_assessment_set3/results/changing_parameters.txt"'),
stringsAsFactors = F,header = T)
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
str(data)
m=match(data$parameter,parameters$symbol)
data$header = parameters$meaning[m]
str(data)
data = data[,c('header','parameter','value','Mean_MAPQ','fraction','Time')]
str(data)
data = arrange(data,parameter,value)
default = data[(data$parameter=='default'),]
data = rawdata
data = cbind(data,fraction=data$Total_aligned/data$Total_reads)
default = data[(data$parameter=='default'),]
data = data[-(data$parameter=='default'),]
m = match(data$parameter, parameters$symbol)
data$header = parameters$meaning[m]
data = data[,c('header','parameter','value','Mean_MAPQ','fraction','Time')]
str(data)
data = arrange(data,parameter,value)
?write.table
??append
?write
write(default)
write(default,file'tmp')
write(default,file='tmp')
write(x=default,file='tmp')
write(x=c(1,2,3))
unlink
unlink()
unlink('data')
?loadconfig
?loadConfig
q()
?gsub()
nm      <- 4
rm(list=ls())
nm      <- 4
md      <- "0G15^GAC0T60T4^AA0C0"
gsub("([\\^]*[ACGT]+)[0]*", " \\1 ", md)
gsub("[0]*" " \\1 ",md)
gsub("[0]*", " \\1 ", md),md)
gsub("[0]*", " \\1 ", md)
gsub("([\\^]*[ACGT]+)", " \\1 ", md)
grep("([\\^]*[ACGT]+)", md)
grepl("([\\^]*[ACGT]+)", md)
grep("([\\^]*[ACGT]+)", md)
grep("([\\^]*[ACGT]+)[0]*", md)
grep("([\\^]*[ACGT]+)[0]*", md, value = T)
grep("()[0]*", md, value = T)
grep("[0]*", md, value = T)
grep("[0]*", md)
regexpr("[0]*", md)
regexpr("([\\^]*[ACGT]+)[0]*", md)
regexpr("([\\^]*[ACGT]+)", md)
gsub("(a+)", "z\\1z", c("abc", "def", "cba a", "aa"), perl=TRUE)
gsub("([\\^]*[ACGT]+)", " \\1 ", md)
gsub("[0]*", " \\1 ", md)
gsub("([\\^]*[ACGT]+)[0]*", " \\1 ", md)
md
md.gsub <- gsub("([\\^]*[ACGT]+)[0]*", " \\1 ", md)
# split each operation using strsplit
md.gsub
strsplit(md.gsub, "[ ]+")
strsplit(md.gsub, "[ ]+")[[1]]
md.spl  <- strsplit(md.gsub, "[ ]+")[[1]]
as.integer()
this    <- as.integer()
nm
md.spl
is.na(as.numeric(y))
is.na(as.numeric(md.spl))
(as.numeric(md.spl))
this <- lapply(md.spl, function(y) {
if (!is.na(as.numeric(y))) {
o <- rep("M", as.numeric(y))
} else if( length(grep("\\^", y)) > 0) {
o <- rep("D", nchar(y) - 1)
} else if (nchar(y) == 1) {
o <- rep("MM", 1)
}
})
this
do.call(c, this)
c
this <- do.call(c, this)
this
which(this == "MM")
this <- which(this == "MM")
this
library(foreach)
install.packages(c("doParallel", "foreach", "dplyr"))
library(foreach)
library(doParallel)
?makeCluster
install.packages('dplyr')
getwd()
setwd("Dropbox/University life/PHD quest/Projects_Current/GATK optimization/BW_VariantCalling/Validation/")
list.files()
setwd("variant_comparison_vcfeval/")
list.files()
data = read.table("comp_stats.txt")
rm(list=ls())
data = read.table("comp_stats.txt")
data = read.table("comp_stats.txt", sep = ":")
View(data)
head(data)
names(data)
names(data) = c("attribute","value")
names(data) = c("Attribute","Value")
data[1,1]
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = "F")
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = "T")
?read.table
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = F)
data[1,1]
names(data) = c("Attribute","Value")
data[1,1]
data["Attribute"=="Location",]
data["Attribute"==Location,]
data["Attribute"=="Location",]
data["Attribute"]
data["Attribute"=="Location"]
data["Attribute"=="Location",]
data$Attribute
data$Attribute=="Location"
data[data$Attribute=="Location",]
data[data$Attribute=="Location",]
data$Attribute
?stripplot
?string
??string
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = F,strip.white = T)
names(data) = c("Attribute","Value")
data[data$Attribute=="Location",]
data["Attribute"]
data["Attribute"]
data[data$Attribute=="Location",]
data[data$Attribute=="Location",1]
data[data$Attribute=="Location",][1]
data[data$Attribute=="Location",2]
data[data$Attribute=="Location",2][1]
basename(data[data$Attribute=="Location",2][1])
basename(data[data$Attribute=="Location",2])
data[data$Attribute=="Location",2] = basename(data[data$Attribute=="Location",2])
View(data)
cars <- mtcars[1:5,1:4]
cars
t(cars)
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,gear), FUN=mean, na.rm=TRUE)
aggdata
mtcars
summary(mtcars)
type(mtcars)
str(mtcars)
str(aggdata)
aggdata
library(reshape2)
?split
split(cars,f = as.factor(rep(c(1,0),5)))
split(cars,f = as.factor(rep(c(1,0),1)))
split(cars,f = 1)
split(cars,f = c(1,0))
split(cars,f = 1:5)
data[data$Attribute=="Location",2]
data["Attribute"]
data$Attribute=="Location"
split(data, f = data$Attribute=="Location")
sum(data$Attribute=="Location")
cbind(data,1:length(data))
str(data)
data = cbind(data,1:length(data))
str(data)
data = cbind(data,1:length(data)[2])
length(data)[2]
size(data)
length(data)
dim(data)
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = F,strip.white = T)
names(data) = c("Attribute","Value")
data[data$Attribute=="Location",2] = basename(data[data$Attribute=="Location",2])
data = cbind(data,1:dim(data)[1])
str(data)
data = read.table("comp_stats.txt", sep = ":",stringsAsFactors = F,strip.white = T)
names(data) = c("Attribute","Value")
data[data$Attribute=="Location",2] = basename(data[data$Attribute=="Location",2])
data = cbind(data,rep(0,dim(data)[1]))
str(data)
data[data$Attribute=="Location",3]
length(data["Attribute"=="Location"])
length(data["Attribute"=="Location",])
dim(data["Attribute"=="Location",])
dim(data[data$Attribute=="Location",])
nrow(data[data$Attribute=="Location",])
data[data$Attribute=="Location",3] = 1:nrow(data[data$Attribute=="Location",])
str(data)
data$Attribute
?melt
fn = 47040838
fp = 7413
tp = 1144357
tp/(tp+fn)
fp/(fp+tp)
tp/(tp+fn)*100
fp/(fp+tp)*100
fn = 47040838
tp = 1143865
fn = 47040838
sen = (tp / (tp + fn))*100; sen
fp = 7413
spec = (fp / (fp+tp)) * 100; spec
